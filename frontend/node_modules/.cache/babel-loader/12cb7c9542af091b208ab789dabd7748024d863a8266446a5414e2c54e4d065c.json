{"ast":null,"code":"var _jsxFileName = \"/home/guyb/ip_finder/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [localIp, setLocalIp] = useState(null);\n  const [domain, setDomain] = useState(\"\");\n  const [resolvedIp, setResolvedIp] = useState([]);\n\n  // fetch all stored IPs when the app loads\n  useEffect(() => {\n    const fetchStoredIps = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:8000/api/all_resolved\");\n        const storedData = response.data;\n\n        // extract domains and IPs from response\n        const formattedData = Object.keys(storedData).map(domain => {\n          const ipList = storedData[domain][0]; // Extract the IP list\n\n          // Ensure it has valid data before saving\n          if (ipList.length > 0 && ipList[0].trim() !== \"\") {\n            return {\n              domain,\n              domainIp: ipList.join(\", \")\n            };\n          }\n          return null; // Exclude invalid entries\n        }).filter(entry => entry !== null); // Remove null values\n\n        setResolvedIp(formattedData);\n      } catch (error) {\n        console.error(\"Error fetching stored IPs:\", error);\n      }\n    };\n    fetchStoredIps();\n  }, []);\n\n  // get domain IP address\n  const resolveDomain = async () => {\n    if (!domain) return;\n\n    // prevent duplicate domains\n    if (resolvedIp.some(entry => entry.domain === domain)) {\n      alert(`The domain \"${domain}\" has already been resolved.`);\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:8000/api/resolve/${domain}`);\n      const domainIp = response.data[0].length > 0 ? response.data[0].join(\", \") : \"N/A\";\n      console.log(response.data);\n      // If IP is \"N/A\", show alert and dont add to the list\n      if (domainIp === \"N/A\") {\n        alert(`IP not found for domain: ${domain}`);\n        return;\n      }\n      setResolvedIp(prevDomainIps => [...prevDomainIps, {\n        domain,\n        domainIp\n      }]);\n    } catch (error) {\n      console.error(\"Error resolving domain:\", error);\n    }\n  };\n\n  // get local privet and public IP addresses\n  const getLocalIp = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:8000/api/get_local_ip\");\n      setLocalIp(response.data);\n    } catch (error) {\n      console.error(\"Error fetching local IP:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"IP Address Finder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getLocalIp,\n      children: \"Get Local IP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), localIp && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Local IP Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Internal IP: \", localIp[0]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Public IP: \", localIp[1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Resolve Domain\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: domain,\n      onChange: e => setDomain(e.target.value),\n      placeholder: \"Enter domain (e.g., google.com)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resolveDomain,\n      children: \"Resolve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), resolvedIp.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Resolved Domains:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), resolvedIp.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: entry.domain\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"IP Address: \", entry.domainIp]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"cXrKFAgxg8KTcOcF6CooDHypGBE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","localIp","setLocalIp","domain","setDomain","resolvedIp","setResolvedIp","fetchStoredIps","response","get","storedData","data","formattedData","Object","keys","map","ipList","length","trim","domainIp","join","filter","entry","error","console","resolveDomain","some","alert","log","prevDomainIps","getLocalIp","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","index","_c","$RefreshReg$"],"sources":["/home/guyb/ip_finder/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nfunction App() {\n    const [localIp, setLocalIp] = useState(null);\n    const [domain, setDomain] = useState(\"\");\n    const [resolvedIp, setResolvedIp] = useState([]);\n\n    // fetch all stored IPs when the app loads\n    useEffect(() => {\n        const fetchStoredIps = async () => {\n            try {\n                const response = await axios.get(\"http://localhost:8000/api/all_resolved\");\n                const storedData = response.data;\n\n                // extract domains and IPs from response\n                const formattedData = Object.keys(storedData)\n                .map(domain => {\n                    const ipList = storedData[domain][0]; // Extract the IP list\n\n                    // Ensure it has valid data before saving\n                    if (ipList.length > 0 && ipList[0].trim() !== \"\") {\n                        return { domain, domainIp: ipList.join(\", \") };\n                    }\n                    return null; // Exclude invalid entries\n                })\n                .filter(entry => entry !== null); // Remove null values\n                \n\n                setResolvedIp(formattedData);\n            } catch (error) {\n                console.error(\"Error fetching stored IPs:\", error);\n            }\n        };\n\n        fetchStoredIps();\n    }, []);\n\n    // get domain IP address\n    const resolveDomain = async () => {\n        if (!domain) return;\n\n        // prevent duplicate domains\n        if (resolvedIp.some(entry => entry.domain === domain)) {\n            alert(`The domain \"${domain}\" has already been resolved.`);\n            return;\n        }\n\n        try {\n            const response = await axios.get(`http://localhost:8000/api/resolve/${domain}`);\n            const domainIp = response.data[0].length > 0 ? response.data[0].join(\", \") : \"N/A\";\n            console.log(response.data);\n            // If IP is \"N/A\", show alert and dont add to the list\n            if (domainIp === \"N/A\") {\n                alert(`IP not found for domain: ${domain}`);\n                return;\n            }\n\n            setResolvedIp(prevDomainIps => [...prevDomainIps, { domain, domainIp}]);\n\n        } catch (error) {\n            console.error(\"Error resolving domain:\", error);\n        }\n    };\n    \n    // get local privet and public IP addresses\n    const getLocalIp = async () => {\n        try {\n            const response = await axios.get(\"http://localhost:8000/api/get_local_ip\");\n            setLocalIp(response.data);\n        } catch (error) {\n            console.error(\"Error fetching local IP:\", error);\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <h1>IP Address Finder</h1>\n            <button onClick={getLocalIp}>Get Local IP</button>\n            {localIp && (\n                <div>\n                    <h2>Local IP Address</h2>\n                    <p>Internal IP: {localIp[0]}</p>\n                    <p>Public IP: {localIp[1]}</p>\n                </div>\n            )}\n            <h2>Resolve Domain</h2>\n            <input\n                type=\"text\"\n                value={domain}\n                onChange={(e) => setDomain(e.target.value)}\n                placeholder=\"Enter domain (e.g., google.com)\"\n            />\n            <button onClick={resolveDomain}>Resolve</button>\n    \n            {resolvedIp.length > 0 && (\n                <div>\n                    <h3>Resolved Domains:</h3>\n                    {resolvedIp.map((entry, index) => (\n                        <div key={index}>\n                            <strong>{entry.domain}</strong>\n                            <ul>\n                                <li>IP Address: {entry.domainIp}</li>\n                            </ul>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}