{"ast":null,"code":"var _jsxFileName = \"/home/guyb/aisap/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [serverIp, setServerIp] = useState(null);\n  const [domain, setDomain] = useState(\"\");\n  const [resolvedIp, setResolvedIp] = useState([]); // Store persisted IPs\n\n  // ✅ Fetch all stored resolved IPs when the app loads\n  useEffect(() => {\n    const fetchStoredIps = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:8000/api/all_resolved\");\n        const storedData = response.data;\n        const formattedData = Object.keys(storedData).map(domain => ({\n          domain,\n          ipv4: storedData[domain][0].length > 0 ? storedData[domain][0].join(\", \") : \"N/A\",\n          ipv6: storedData[domain][1].length > 0 ? storedData[domain][1].join(\", \") : \"N/A\"\n        }));\n        setResolvedIp(formattedData);\n      } catch (error) {\n        console.error(\"Error fetching stored IPs:\", error);\n      }\n    };\n    fetchStoredIps();\n  }, []);\n\n  // ✅ Resolve domain & store in backend\n  const resolveDomain = async () => {\n    if (!domain) return;\n\n    // Prevent duplicate domains in frontend (backend already caches them)\n    if (resolvedIp.some(entry => entry.domain === domain)) {\n      alert(`The domain \"${domain}\" has already been resolved.`);\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:8000/api/resolve/${domain}`);\n      const ipv4 = response.data[0].length > 0 ? response.data[0].join(\", \") : \"N/A\";\n      const ipv6 = response.data[1].length > 0 ? response.data[1].join(\", \") : \"N/A\";\n\n      // ✅ Update frontend list\n      setResolvedIp(prev => [...prev, {\n        domain,\n        ipv4,\n        ipv6\n      }]);\n      console.log(\"Resolved IP:\", {\n        domain,\n        ipv4,\n        ipv6\n      });\n    } catch (error) {\n      console.error(\"Error resolving domain:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"IP Address Finder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Resolve Domain\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: domain,\n      onChange: e => setDomain(e.target.value),\n      placeholder: \"Enter domain (e.g., google.com)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resolveDomain,\n      children: \"Resolve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), resolvedIp.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Resolved Domains (Saved in Backend Memory):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), resolvedIp.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: entry.domain\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"IPv4: \", entry.ipv4]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"IPv6: \", entry.ipv6]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"kJuB+VFgf8Rjv0Mdnx+bxtktgKw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","serverIp","setServerIp","domain","setDomain","resolvedIp","setResolvedIp","fetchStoredIps","response","get","storedData","data","formattedData","Object","keys","map","ipv4","length","join","ipv6","error","console","resolveDomain","some","entry","alert","prev","log","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","index","_c","$RefreshReg$"],"sources":["/home/guyb/aisap/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n    const [serverIp, setServerIp] = useState(null);\n    const [domain, setDomain] = useState(\"\");\n    const [resolvedIp, setResolvedIp] = useState([]); // Store persisted IPs\n\n    // ✅ Fetch all stored resolved IPs when the app loads\n    useEffect(() => {\n        const fetchStoredIps = async () => {\n            try {\n                const response = await axios.get(\"http://localhost:8000/api/all_resolved\");\n                const storedData = response.data;\n                \n                const formattedData = Object.keys(storedData).map(domain => ({\n                    domain,\n                    ipv4: storedData[domain][0].length > 0 ? storedData[domain][0].join(\", \") : \"N/A\",\n                    ipv6: storedData[domain][1].length > 0 ? storedData[domain][1].join(\", \") : \"N/A\"\n                }));\n\n                setResolvedIp(formattedData);\n            } catch (error) {\n                console.error(\"Error fetching stored IPs:\", error);\n            }\n        };\n\n        fetchStoredIps();\n    }, []);\n\n    // ✅ Resolve domain & store in backend\n    const resolveDomain = async () => {\n        if (!domain) return;\n\n        // Prevent duplicate domains in frontend (backend already caches them)\n        if (resolvedIp.some(entry => entry.domain === domain)) {\n            alert(`The domain \"${domain}\" has already been resolved.`);\n            return;\n        }\n\n        try {\n            const response = await axios.get(`http://localhost:8000/api/resolve/${domain}`);\n\n            const ipv4 = response.data[0].length > 0 ? response.data[0].join(\", \") : \"N/A\";\n            const ipv6 = response.data[1].length > 0 ? response.data[1].join(\", \") : \"N/A\";\n\n            // ✅ Update frontend list\n            setResolvedIp(prev => [...prev, { domain, ipv4, ipv6 }]);\n\n            console.log(\"Resolved IP:\", { domain, ipv4, ipv6 });\n        } catch (error) {\n            console.error(\"Error resolving domain:\", error);\n        }\n    };\n\n    return (\n        <div style={{ padding: \"20px\", fontFamily: \"Arial, sans-serif\" }}>\n            <h1>IP Address Finder</h1>\n\n            <h2>Resolve Domain</h2>\n            <input\n                type=\"text\"\n                value={domain}\n                onChange={(e) => setDomain(e.target.value)}\n                placeholder=\"Enter domain (e.g., google.com)\"\n            />\n            <button onClick={resolveDomain}>Resolve</button>\n\n            {/* Display Stored Resolved Domains */}\n            {resolvedIp.length > 0 && (\n                <div>\n                    <h3>Resolved Domains (Saved in Backend Memory):</h3>\n                    {resolvedIp.map((entry, index) => (\n                        <div key={index}>\n                            <strong>{entry.domain}</strong>\n                            <ul>\n                                <li>IPv4: {entry.ipv4}</li>\n                                <li>IPv6: {entry.ipv6}</li>\n                            </ul>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAElD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,wCAAwC,CAAC;QAC1E,MAAMC,UAAU,GAAGF,QAAQ,CAACG,IAAI;QAEhC,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACJ,UAAU,CAAC,CAACK,GAAG,CAACZ,MAAM,KAAK;UACzDA,MAAM;UACNa,IAAI,EAAEN,UAAU,CAACP,MAAM,CAAC,CAAC,CAAC,CAAC,CAACc,MAAM,GAAG,CAAC,GAAGP,UAAU,CAACP,MAAM,CAAC,CAAC,CAAC,CAAC,CAACe,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK;UACjFC,IAAI,EAAET,UAAU,CAACP,MAAM,CAAC,CAAC,CAAC,CAAC,CAACc,MAAM,GAAG,CAAC,GAAGP,UAAU,CAACP,MAAM,CAAC,CAAC,CAAC,CAAC,CAACe,IAAI,CAAC,IAAI,CAAC,GAAG;QAChF,CAAC,CAAC,CAAC;QAEHZ,aAAa,CAACM,aAAa,CAAC;MAChC,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACtD;IACJ,CAAC;IAEDb,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMe,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACnB,MAAM,EAAE;;IAEb;IACA,IAAIE,UAAU,CAACkB,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACrB,MAAM,KAAKA,MAAM,CAAC,EAAE;MACnDsB,KAAK,CAAC,eAAetB,MAAM,8BAA8B,CAAC;MAC1D;IACJ;IAEA,IAAI;MACA,MAAMK,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,qCAAqCN,MAAM,EAAE,CAAC;MAE/E,MAAMa,IAAI,GAAGR,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAACM,MAAM,GAAG,CAAC,GAAGT,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK;MAC9E,MAAMC,IAAI,GAAGX,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAACM,MAAM,GAAG,CAAC,GAAGT,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK;;MAE9E;MACAZ,aAAa,CAACoB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAAEvB,MAAM;QAAEa,IAAI;QAAEG;MAAK,CAAC,CAAC,CAAC;MAExDE,OAAO,CAACM,GAAG,CAAC,cAAc,EAAE;QAAExB,MAAM;QAAEa,IAAI;QAAEG;MAAK,CAAC,CAAC;IACvD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACnD;EACJ,CAAC;EAED,oBACItB,OAAA;IAAK8B,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAoB,CAAE;IAAAC,QAAA,gBAC7DjC,OAAA;MAAAiC,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE1BrC,OAAA;MAAAiC,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBrC,OAAA;MACIsC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAElC,MAAO;MACdmC,QAAQ,EAAGC,CAAC,IAAKnC,SAAS,CAACmC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC3CI,WAAW,EAAC;IAAiC;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACFrC,OAAA;MAAQ4C,OAAO,EAAEpB,aAAc;MAAAS,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAG/C9B,UAAU,CAACY,MAAM,GAAG,CAAC,iBAClBnB,OAAA;MAAAiC,QAAA,gBACIjC,OAAA;QAAAiC,QAAA,EAAI;MAA2C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACnD9B,UAAU,CAACU,GAAG,CAAC,CAACS,KAAK,EAAEmB,KAAK,kBACzB7C,OAAA;QAAAiC,QAAA,gBACIjC,OAAA;UAAAiC,QAAA,EAASP,KAAK,CAACrB;QAAM;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,eAC/BrC,OAAA;UAAAiC,QAAA,gBACIjC,OAAA;YAAAiC,QAAA,GAAI,QAAM,EAACP,KAAK,CAACR,IAAI;UAAA;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC3BrC,OAAA;YAAAiC,QAAA,GAAI,QAAM,EAACP,KAAK,CAACL,IAAI;UAAA;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC;MAAA,GALCQ,KAAK;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMV,CACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACnC,EAAA,CAlFQD,GAAG;AAAA6C,EAAA,GAAH7C,GAAG;AAoFZ,eAAeA,GAAG;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}