{"ast":null,"code":"var _jsxFileName = \"/home/guyb/aisap/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [serverIp, setServerIp] = useState(null);\n  const [domain, setDomain] = useState(\"\");\n  const [resolvedDomains, setResolvedDomains] = useState([]); // Track resolved domains\n  const [resolvedIp, setResolvedIp] = useState([]); // Store IPv4 and IPv6 together\n\n  // Fetch server's IPs\n  const fetchServerIp = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:8000/api/ip\");\n      setServerIp(response.data);\n    } catch (error) {\n      console.error(\"Error fetching server IP:\", error);\n    }\n  };\n\n  // Resolve domain IPs\n  const resolveDomain = async () => {\n    if (!domain) return;\n\n    // ✅ Check for duplicate domains\n    if (resolvedDomains.includes(domain)) {\n      alert(`The domain \"${domain}\" has already been resolved.`);\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:8000/api/resolve/${domain}`);\n      const data = response.data; // Expecting [ipv4_addresses, ipv6_addresses]\n\n      // ✅ Extract IPv4 from even indices and IPv6 from odd indices\n      const ipv4 = data.filter((_, index) => index % 2 === 0).flat().join(\", \") || \"N/A\";\n      const ipv6 = data.filter((_, index) => index % 2 !== 0).flat().join(\", \") || \"N/A\";\n\n      // ✅ Update state while preserving previous values\n      setResolvedDomains(prev => [...prev, domain]);\n      setResolvedIp(prev => [...prev, {\n        domain,\n        ipv4,\n        ipv6\n      }]);\n      console.log(\"Resolved IP:\", {\n        domain,\n        ipv4,\n        ipv6\n      });\n    } catch (error) {\n      console.error(\"Error resolving domain:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"IP Address Finder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchServerIp,\n      style: {\n        marginBottom: \"10px\"\n      },\n      children: \"Get Server IP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), serverIp && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Internal IP:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 24\n        }, this), \" \", serverIp.internal_ip]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"External IP:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 24\n        }, this), \" \", serverIp.external_ip]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Resolve Domain\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: domain,\n      onChange: e => setDomain(e.target.value),\n      placeholder: \"Enter domain (e.g., google.com)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resolveDomain,\n      children: \"Resolve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), resolvedIp.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Resolved Domains (IPv4 & IPv6):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), resolvedIp.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: entry.domain\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"IPv4: \", entry.ipv4]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"IPv6: \", entry.ipv6]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"T6X/EX4Pvg/9mBOokB5eZ62oV9E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","serverIp","setServerIp","domain","setDomain","resolvedDomains","setResolvedDomains","resolvedIp","setResolvedIp","fetchServerIp","response","get","data","error","console","resolveDomain","includes","alert","ipv4","filter","_","index","flat","join","ipv6","prev","log","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginBottom","internal_ip","external_ip","type","value","onChange","e","target","placeholder","length","map","entry","_c","$RefreshReg$"],"sources":["/home/guyb/aisap/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n    const [serverIp, setServerIp] = useState(null);\n    const [domain, setDomain] = useState(\"\");\n    const [resolvedDomains, setResolvedDomains] = useState([]); // Track resolved domains\n    const [resolvedIp, setResolvedIp] = useState([]); // Store IPv4 and IPv6 together\n\n    // Fetch server's IPs\n    const fetchServerIp = async () => {\n        try {\n            const response = await axios.get(\"http://localhost:8000/api/ip\");\n            setServerIp(response.data);\n        } catch (error) {\n            console.error(\"Error fetching server IP:\", error);\n        }\n    };\n\n    // Resolve domain IPs\n    const resolveDomain = async () => {\n        if (!domain) return;\n\n        // ✅ Check for duplicate domains\n        if (resolvedDomains.includes(domain)) {\n            alert(`The domain \"${domain}\" has already been resolved.`);\n            return;\n        }\n\n        try {\n            const response = await axios.get(`http://localhost:8000/api/resolve/${domain}`);\n\n            const data = response.data; // Expecting [ipv4_addresses, ipv6_addresses]\n\n            // ✅ Extract IPv4 from even indices and IPv6 from odd indices\n            const ipv4 = data.filter((_, index) => index % 2 === 0).flat().join(\", \") || \"N/A\";\n            const ipv6 = data.filter((_, index) => index % 2 !== 0).flat().join(\", \") || \"N/A\";\n\n            // ✅ Update state while preserving previous values\n            setResolvedDomains(prev => [...prev, domain]);  \n            setResolvedIp(prev => [...prev, { domain, ipv4, ipv6 }]);\n\n            console.log(\"Resolved IP:\", { domain, ipv4, ipv6 });\n        } catch (error) {\n            console.error(\"Error resolving domain:\", error);\n        }\n    };\n\n    return (\n        <div style={{ padding: \"20px\", fontFamily: \"Arial, sans-serif\" }}>\n            <h1>IP Address Finder</h1>\n\n            <button onClick={fetchServerIp} style={{ marginBottom: \"10px\" }}>Get Server IP</button>\n            {serverIp && (\n                <div>\n                    <p><strong>Internal IP:</strong> {serverIp.internal_ip}</p>\n                    <p><strong>External IP:</strong> {serverIp.external_ip}</p>\n                </div>\n            )}\n\n            <h2>Resolve Domain</h2>\n            <input\n                type=\"text\"\n                value={domain}\n                onChange={(e) => setDomain(e.target.value)}\n                placeholder=\"Enter domain (e.g., google.com)\"\n            />\n            <button onClick={resolveDomain}>Resolve</button>\n\n            {/* Display Resolved Domains with IPv4 & IPv6 */}\n            {resolvedIp.length > 0 && (\n                <div>\n                    <h3>Resolved Domains (IPv4 & IPv6):</h3>\n                    {resolvedIp.map((entry, index) => (\n                        <div key={index}>\n                            <strong>{entry.domain}</strong>\n                            <ul>\n                                <li>IPv4: {entry.ipv4}</li>\n                                <li>IPv6: {entry.ipv6}</li>\n                            </ul>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}